1 - Pair with Target Sum
- matches Two pointer question type of 'find set of elements in sorted array or linked list that match some condition' because trying to find pair where sum is equal to target sum
- knew correct also and implemented as code correctly
- solution was same as model solution (only difference was when we generated the return array of the pointers -> I did it at the beginning when initializing my variables vs. they did at the end when saw sum === target -> I preferred their choice because it means I don't keep track of an array until the very end which means I save some space while algo is happening - though end space used is the same cuz both return same array - and also makes code less verbose) 

2 - Remove Duplicates
- matches Two pointer question type of 'find set of elements in sorted array or linked list that match some condition' because trying to find all the elements that are unique
- had a different algo but think it would have worked -> didn't bother coding
- saw model solution, it had different usage of two pointers. My two pointers were 1 pointer was the last unique index and then the next non duplicate index. Model had one pointer for iterating the array (to spot the next non duplicate number) and one pointer for remembering where to place the next non-duplicate number when we found it. So model algorithm will go through the array with 1st and whenever see a non-duplicate number we move it next to the last non-duplicate number weâ€™ve seen whose place / index we remembered via 2nd pointer. -> walked through example using model algorithm to make sense of it. Made sense. In fact lot better than my OG algo. Rewrote model algo in my own words and implemented it successfully (minor difference in that i use for loop whereas model sol uses while loop but no difference in logic)



3 - Squaring a Sorted Array
- didn't bother coding my og also but compared it to model solution algo. -> Main difference was that in og algo i was looking for where 0 started. Whereas w/model solution it was looking for where first non negative # started. -> Besides that the idea was the same, have 1 pointer point to the + numbers while the other pointer point to the - numbers, compare squares of elements pointers pointing to, take the greater one and add it to the output array, move the pointer that points to the square you just added by one, rinse and repeat. -> As I tried to break it down into steps a computer could understand aka. final algo... realized that code would get messier than i'd like because would need to have conditions like if one pointer or another went out of bounds of the array then we'd no longer do comparisons and then just add the squares of the other pointer until that pointer also went out of bounds -> saw that model solution must have thought the same because instead of taking approach where started both pointers inside out, started both pointers from outside in (this way terminal condition would be very clear where pointer that started from left > pointer that started from right) -> after seeing model solution take this approach I attempted to code out solution without looking at it -> succeeded




4 - Triplet Sum to Zero
- Got stuck in trying to create my og solution -> one thing that I did realize was that we needed to sort array for two pointers approach to work effectively -> what I didn't realize was - as shown in model solution - could treat this problem as previous problem we solved aka. could use similar algorithm with a few tweaks. -> walked through model algorithm in an example input... and understood how it worked / the steps -> wasn't motivated to code it out but.... tried and succeeded? -> I nearly did. Had everything to the code right except I couldn't figure out how to prevent storing duplicates (I could probably look at output array and check to see if triplet existed before storing but figured that would not be viable option because it's too costly time wise -> tried copy pasting model solution code for removing duplicates didn't work -> tried other approaches but couldn't find working remove duplicate).


*After this question I am so done w/two pointers I'm moving onto the next section..... might take a break from ds&a qs and just move onto system design for now

5 - 

